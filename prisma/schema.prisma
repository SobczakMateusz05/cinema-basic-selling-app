generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model film {
  id       Int       @id(map: "PK_film_1") @default(autoincrement())
  title    String    @db.VarChar(50)
  premiere DateTime  @db.Date
  ticket   Float     @db.Money
  showing  showing[]
}

model glasses_3d {
  id           Int            @id(map: "PK_glasses_3d") @default(autoincrement())
  name         String         @db.VarChar(50)
  price        Float          @db.Money
  sold_glasses sold_glasses[]
}

model employee {
  id           Int            @id(map: "PK_employee") @default(autoincrement())
  name         String         @db.VarChar(50)
  surname      String         @db.VarChar(50)
  salary       Float          @db.Money
  logs         logs[]
  sold_glasses sold_glasses[]
  sold_snack   sold_snack[]
  sold_ticket  sold_ticket[]
  users        users[]
}

model snack {
  id         Int          @id(map: "PK_snack_1") @default(autoincrement())
  name       String       @db.VarChar(50)
  price      Float        @db.Money
  sold_snack sold_snack[]
}

model snack_size {
  id               Int          @id(map: "PK_snack_size") @default(autoincrement())
  price_multiplier Float
  name             String       @db.VarChar(50)
  sold_snack       sold_snack[]
}

model room {
  number          Int       @id(map: "PK_room")
  number_of_seats Int
  showing         showing[]
}

model showing {
  id              Int           @id(map: "PK_showing") @default(autoincrement()) @unique
  id_film         Int
  date            DateTime      @db.Date
  room_number     Int
  available_seats Int?
  film            film          @relation(fields: [id_film], references: [id], onUpdate: NoAction, map: "FK_showing_film")
  room            room          @relation(fields: [room_number], references: [number], onUpdate: NoAction, map: "FK_showing_room")
  sold_ticket     sold_ticket[]
}

model sold_glasses {
  id          Int        @id(map: "PK_sold_glasses") @default(autoincrement())
  id_glasses  Int
  id_employee Int
  date        DateTime?  @db.Date
  employee    employee   @relation(fields: [id_employee], references: [id], onUpdate: NoAction, map: "FK_sold_glasses_employee")
  glasses_3d  glasses_3d @relation(fields: [id_glasses], references: [id], onUpdate: NoAction, map: "FK_sold_glasses_glasses_3d")
}

model sysdiagrams {
  name         String @db.NVarChar(128)
  principal_id Int
  diagram_id   Int    @id(map: "PK__sysdiagr__C2B05B61A8E2F727") @default(autoincrement())
  version      Int?
  definition   Bytes?

  @@unique([principal_id, name], map: "UK_principal_name")
}

model sold_ticket {
  id          Int       @id(map: "PK_sold_ticket_1") @default(autoincrement())
  name        String    @db.VarChar(40)
  surname     String    @db.VarChar(50)
  id_showing  Int
  email       String    @db.VarChar(75)
  date        DateTime? @db.Date
  id_employee Int
  employee    employee  @relation(fields: [id_employee], references: [id], onUpdate: NoAction, map: "FK_sold_ticket_employee")
  showing     showing   @relation(fields: [id_showing], references: [id], onUpdate: NoAction, map: "FK_sold_ticket_showing")
}

model users {
  id          Int      @id(map: "PK_users") @default(autoincrement())
  login       String   @unique @db.VarChar(50)
  password    String   @db.VarChar(255)
  id_employee Int
  employee    employee @relation(fields: [id_employee], references: [id], onUpdate: NoAction, map: "FK_users_employee")
}

model sold_snack {
  id          Int        @id(map: "PK_sold_snack") @default(autoincrement())
  id_snack    Int
  id_size     Int
  date        DateTime?  @db.Date
  id_employee Int
  employee    employee   @relation(fields: [id_employee], references: [id], onUpdate: NoAction, map: "FK_sold_snack_employee")
  snack_size  snack_size @relation(fields: [id_size], references: [id], onUpdate: NoAction, map: "FK_sold_snack_snack_size")
  snack       snack      @relation(fields: [id_snack], references: [id], onUpdate: NoAction, map: "FK_sold_snack_snack1")
}

model logs {
  id          Int        @id(map: "PK_logs") @default(autoincrement())
  id_action   Int
  date        DateTime   @db.DateTime
  id_employee Int
  log_action  log_action @relation(fields: [id_action], references: [id], onUpdate: NoAction, map: "FK_logs_action")
  employee    employee   @relation(fields: [id_employee], references: [id], onUpdate: NoAction, map: "FK_logs_employee")
}

model log_action {
  id   Int    @id(map: "PK_log_action") @default(autoincrement())
  name String @unique @db.VarChar(100)
  logs logs[]
}
