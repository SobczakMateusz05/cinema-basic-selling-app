generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model film {
  id       Int       @id(map: "PK_film_1") @default(autoincrement())
  title    String?   @db.VarChar(50)
  premiere DateTime? @db.DateTime
  ticket   Float?    @db.Money
  showing  showing[]
}

model glasses_3d {
  id           Int            @id(map: "PK_glasses_3d") @default(autoincrement())
  name         String?        @db.VarChar(50)
  price        Float?         @db.Money
  sold_glasses sold_glasses[]
}

model employee {
  id            Int             @id(map: "PK_employee") @default(autoincrement()) @unique
  name          String?         @db.VarChar(50)
  surname       String?         @db.VarChar(50)
  salary        Float?          @db.Money
  ordered_snack ordered_snack[]
  sold_glasses  sold_glasses[]
  users         users[]
}

model snack {
  id            Int             @id(map: "PK_snack_1") @default(autoincrement())
  name          String?         @db.VarChar(50)
  price         Float?          @db.Money
  ordered_snack ordered_snack[]
}

model snack_size {
  id               Int             @id(map: "PK_snack_size") @default(autoincrement())
  size             String?         @db.VarChar(50)
  price_multiplier Float?
  ordered_snack    ordered_snack[]
}

model room {
  number          Int       @id(map: "PK_room")
  number_of_seats Int?
  showing         showing[]
}

model showing {
  id            Int             @id(map: "PK_showing") @default(autoincrement())
  id_film       Int?
  date          DateTime?       @db.Date
  room_number   Int?
  participation participation[]
  film          film?           @relation(fields: [id_film], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_showing_film")
  room          room?           @relation(fields: [room_number], references: [number], onDelete: NoAction, onUpdate: NoAction, map: "FK_showing_room")
}

model sold_glasses {
  id               Int            @id(map: "PK_sold_glasses") @default(autoincrement())
  id_glasses       Int?
  id_participation Int?
  id_employee      Int?
  date             DateTime?      @db.Date
  employee         employee?      @relation(fields: [id_employee], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_sold_glasses_employee")
  glasses_3d       glasses_3d?    @relation(fields: [id_glasses], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_sold_glasses_glasses_3d")
  participation    participation? @relation(fields: [id_participation], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_sold_glasses_participation")
}

model sysdiagrams {
  name         String @db.NVarChar(128)
  principal_id Int
  diagram_id   Int    @id(map: "PK__sysdiagr__C2B05B61A8E2F727") @default(autoincrement())
  version      Int?
  definition   Bytes?

  @@unique([principal_id, name], map: "UK_principal_name")
}

model participation {
  id            Int             @id(map: "PK_participation_1") @default(autoincrement())
  name          String?         @db.VarChar(40)
  surname       String?         @db.VarChar(50)
  id_showing    Int?
  ordered_snack ordered_snack[]
  showing       showing?        @relation(fields: [id_showing], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_participation_showing")
  sold_glasses  sold_glasses[]
}

model users {
  id          Int       @id(map: "PK_users") @default(autoincrement())
  login       String    @unique @db.VarChar(50)
  password    String    @db.VarChar(255)
  id_employee Int
  employee    employee? @relation(fields: [id_employee], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_users_employee")
}

model ordered_snack {
  id               Int            @id(map: "PK_ordered_snack") @default(autoincrement())
  id_snack         Int?
  id_participation Int?
  id_size          Int?
  date             String?        @db.NChar(10)
  id_employee      Int?
  employee         employee?      @relation(fields: [id_employee], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_ordered_snack_employee")
  participation    participation? @relation(fields: [id_participation], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_ordered_snack_participation1")
  snack_size       snack_size?    @relation(fields: [id_size], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_ordered_snack_snack_size")
  snack            snack?         @relation(fields: [id_snack], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_ordered_snack_snack1")
}
