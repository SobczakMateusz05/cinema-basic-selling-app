generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model filmy {
  id       Int       @id(map: "PK_filmy_1") @default(autoincrement())
  tytul    String?   @db.NVarChar(50)
  premiera DateTime? @db.DateTime
  bilety   Float?    @db.Money
  seanse   seanse[]
}

model okulary_3d {
  id                Int                 @id(map: "PK_okulary_3d") @default(autoincrement())
  nazwa             String?             @db.VarChar(50)
  cena              Float?              @db.Money
  sprzedane_okulary sprzedane_okulary[]
}

model pracownicy {
  id                  Int                   @id(map: "PK_pracownicy") @default(autoincrement())
  imie                String?               @db.VarChar(50)
  nazwisko            String?               @db.VarChar(50)
  pesel               String?               @db.Char(11)
  pensja              Float?                @db.Money
  sprzedane_okulary   sprzedane_okulary[]
  uzytkownicy         uzytkownicy[]
  zamowione_przekaski zamowione_przekaski[]
}

model przekaski {
  id                  Int                   @id(map: "PK_przekaski_1") @default(autoincrement())
  nazwa               String?               @db.VarChar(50)
  cena                Float?                @db.Money
  zamowione_przekaski zamowione_przekaski[]
}

model rozmiar_przekaski {
  id                  Int                   @id(map: "PK_rozmiar_przekaski") @default(autoincrement())
  rozmiar             String?               @db.VarChar(50)
  mnoznik_ceny        Float?
  zamowione_przekaski zamowione_przekaski[]
}

model sale {
  numer         Int      @id(map: "PK_sale")
  liczba_miejsc Int?
  seanse        seanse[]
}

model seanse {
  id           Int            @id(map: "PK_seanse") @default(autoincrement())
  id_filmu     Int?
  data         DateTime?      @db.Date
  numer_sali   Int?
  filmy        filmy?         @relation(fields: [id_filmu], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_seanse_filmy")
  sale         sale?          @relation(fields: [numer_sali], references: [numer], onDelete: NoAction, onUpdate: NoAction, map: "FK_seanse_sale")
  uczestnictwo uczestnictwo[]
}

model sprzedane_okulary {
  id            Int           @id(map: "PK_sprzedane_okulary") @default(autoincrement())
  id_okularow   Int?
  id_uczestnika Int?
  id_pracownika Int?
  data          DateTime?     @db.Date
  okulary_3d    okulary_3d?   @relation(fields: [id_okularow], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_sprzedane_okulary_okulary_3d")
  pracownicy    pracownicy?   @relation(fields: [id_pracownika], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_sprzedane_okulary_pracownicy")
  uczestnictwo  uczestnictwo? @relation(fields: [id_uczestnika], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_sprzedane_okulary_uczestnictwo1")
}

model sysdiagrams {
  name         String @db.NVarChar(128)
  principal_id Int
  diagram_id   Int    @id(map: "PK__sysdiagr__C2B05B61A8E2F727") @default(autoincrement())
  version      Int?
  definition   Bytes?

  @@unique([principal_id, name], map: "UK_principal_name")
}

model uczestnictwo {
  id                  Int                   @id(map: "PK_uczestnictwo_1") @default(autoincrement())
  imie                String?               @db.NVarChar(40)
  nazwisko            String?               @db.NVarChar(30)
  id_seansu           Int?
  sprzedane_okulary   sprzedane_okulary[]
  seanse              seanse?               @relation(fields: [id_seansu], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_uczestnictwo_seanse")
  zamowione_przekaski zamowione_przekaski[]
}

model uzytkownicy {
  id            Int         @id(map: "PK__uzytkown__8215F588EEE9E495") @default(autoincrement())
  login         String      @unique @db.VarChar(50)
  haslo         String      @db.VarChar(255)
  id_pracownika Int?
  pracownicy    pracownicy? @relation(fields: [id_pracownika], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_uzytkownicy_pracownicy")
}

model zamowione_przekaski {
  id                Int                @id(map: "PK_zamowione_przekaski") @default(autoincrement())
  id_przekaski      Int?
  id_uczestnika     Int?
  id_rozmiaru       Int?
  data              String?            @db.NChar(10)
  id_pracownika     Int?
  pracownicy        pracownicy?        @relation(fields: [id_pracownika], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_zamowione_przekaski_pracownicy")
  przekaski         przekaski?         @relation(fields: [id_przekaski], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_zamowione_przekaski_przekaski1")
  rozmiar_przekaski rozmiar_przekaski? @relation(fields: [id_rozmiaru], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_zamowione_przekaski_rozmiar_przekaski")
  uczestnictwo      uczestnictwo?      @relation(fields: [id_uczestnika], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_zamowione_przekaski_uczestnictwo1")
}
